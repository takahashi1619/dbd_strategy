# 下記import欄
import random
import itertools

# 下記リスト型データ（予備）↓
survivors = ["ドワイト・フェアフィールド", "メグ・トーマス", "クローデット・モレル", "ジェイク・パーク", "ネア・カールソン", "エース・ヴィスコンティ", "フェン・ミン", "デイビッド・キング", "ウィリアム・ビル・オーバーベック", "ローリー・ストロード", "クエンティン・スミス", "タップ刑事", "ケイト・デンソン", "アダム・フランシス", "ジェフ・ヨハンセン", "ジェーン・ロメロ", "アシュレイ・J・ウィリアムズ", "木村結衣", "ザリーナ・カッシル", "シェリル・メイソン", "フェリックス・リクター", "エロディー・ラコト", "リー・ユンジン", "レオン・S・ケネディ", "ジル・バレンタイン", "ミカエラ・リード", "ジョナ・バスケス", "浅川陽一", "ハディ・カウル", "エイダ・ウォン", "レベッカ・チェンバース", "ビットリオ・トスカーノ", "タリータ・リーラ", "レナート・リーラ", "ガブリエル・ソーマ", "ニコラス・ケイジ", "エレン・リプリー", "スティーブ・ハリントン", "ナンシー・ウィーラー"]
suv_park_1 = ["絆", "有能の証明", "リーダー", "素早く静かに", "全力疾走", "アドレナリン", "共感", "植物学の知識", "セルフケア", "鋼の意思", "魂の平穏", "サボタージュ", "スマートな着地", "都会の逃走術", "都会の生存術", "手札公開", "賭け金のレイズ", "最後の切り札", "テクニシャン", "しなやか", "警戒", "ずっと一緒だ", "デッド・ハード", "弱音はナシだ", "置き去りにされた者", "与えられた猶予", "不滅", "唯一の生存者", "執念の対象", "決死の一撃", "目を覚ませ！", "調剤学", "寝ずの番", "執念", "刑事の直感", "張り込み", "ダンス・ウィズ・ミー", "ウィンドウズ・オブ・オポチュニティ", "ボイルオーバー", "陽動", "解放", "独学者", "ブレイクダウン", "アフターケア", "ディストーション", "連帯感", "平常心", "真っ向勝負", "フリップ・フロップ", "ベルトを締めろ！", "英雄の奮起", "怪我の功名", "強硬手段", "突破", "オフレコ", "おとり", "人々のために", "ソウルガード", "血の協定", "抑圧の同盟", "透視家", "苦肉の策", "耐久設計", "査定", "欺き", "勢力争い", "出世街道", "大ヒット", "自己防衛", "忍苦の時", "スタングレネード", "新人魂", "カウンターフォース", "起死回生", "地雷爆破", "千里眼", "恵み：癒しの輪", "恵み：シャドウステップ", "是正措置", "恵み：指数関数", "打開策", "父の助言", "共感的つながり", "恵み：霊界理論", "インナーフォーカス", "残像の顕現", "過剰な熱意", "盗聴", "反射回復", "雲隠れ", "みなぎる活力", "安心感", "全集中", "位置エネルギー", "霧の作法", "加速の策略", "逃亡の飛躍", "切磋琢磨", "チームワーク：二人の力", "影の実力者", "血の騒ぎ", "チームワーク：共同ステルス", "修理担当者", "状況適応能力", "ゴミ漁りの名人", "劇作法", "シーンの相手役", "予想外の展開", "科学的な罠", "忍び足", "幸運の星", "きっとやり遂げる", "コソ泥の本能", "セカンドウインド(リニューアル)", "ツルツルとした肉体", "デジャブ", "ベビーシッター(監視者)", "一緒にいよう(状況認識)", "予感", "仲間意識(親近感)", "内なる力(内なる回復)", "凍りつく背筋", "執着心", "自己認識", "小さな獲物", "希望", "痛みも気から", "血族", "誰も見捨てはしない", "身軽", "逆境魂", "闇の感覚"]
suv_park_2 = [["絆", "有能の証明", "リーダー"], ["素早く静かに", "全力疾走", "アドレナリン"], ["共感", "植物学の知識", "セルフケア"], ["鋼の意思", "魂の平穏", "サボタージュ"], ["スマートな着地", "都会の逃走術", "都会の生存術"], ["手札公開", "賭け金のレイズ", "最後の切り札"], ["テクニシャン", "しなやか", "警戒"], ["ずっと一緒だ", "デッド・ハード", "弱音はナシだ"], ["置き去りにされた者", "与えられた猶予", "不滅"], ["唯一の生存者", "執念の対象", "決死の一撃"], ["目を覚ませ！", "調剤学", "寝ずの番"], ["執念", "刑事の直感", "張り込み"], ["ダンス・ウィズ・ミー", "ウィンドウズ・オブ・オポチュニティ", "ボイルオーバー"], ["陽動", "解放", "独学者"], ["ブレイクダウン", "アフターケア", "ディストーション"], ["連帯感", "平常心", "真っ向勝負"], ["フリップ・フロップ", "ベルトを締めろ！", "英雄の奮起"], ["怪我の功名", "強硬手段", "突破"], ["オフレコ", "おとり", "人々のために"], ["ソウルガード", "血の協定", "抑圧の同盟"], ["透視家", "苦肉の策", "耐久設計"], ["査定", "欺き", "勢力争い"], ["出世街道", "大ヒット", "自己防衛"], ["忍苦の時", "スタングレネード", "新人魂"], ["カウンターフォース", "起死回生", "地雷爆破"], ["千里眼", "恵み：癒しの輪", "恵み：シャドウステップ"], ["是正措置", "恵み：指数関数", "打開策"], ["父の助言", "共感的つながり", "恵み：霊界理論"], ["インナーフォーカス", "残像の顕現", "過剰な熱意"], ["盗聴", "反射回復", "雲隠れ"], ["みなぎる活力", "安心感", "全集中"], ["位置エネルギー", "霧の作法", "加速の策略"], ["逃亡の飛躍", "切磋琢磨", "チームワーク：二人の力"], ["影の実力者", "血の騒ぎ", "チームワーク：共同ステルス"], ["修理担当者", "状況適応能力", "ゴミ漁りの名人"], ["劇作法", "シーンの相手役", "予想外の展開"], ["科学的な罠", "忍び足", "幸運の星"], ["きっとやり遂げる", "コソ泥の本能", "セカンドウインド(リニューアル)", "ツルツルとした肉体", "デジャブ", "ベビーシッター(監視者)", "一緒にいよう(状況認識)", "予感", "仲間意識(親近感)", "内なる力(内なる回復)", "凍りつく背筋", "執着心", "自己認識", "小さな獲物", "希望", "痛みも気から", "血族", "誰も見捨てはしない", "身軽", "逆境魂", "闇の感覚"]]
# suv_eng = [DwightFairfield, MegThomas, ClaudetteMorel, JakePark, NeaKarlsson, LaurieStrode, AceVisconti, WilliamBillOverbeck, FengMin, DavidKing, QuentinSmith, DavidTapp, KateDenson, AdamFrancis, JeffJohansen, JaneRomero, AshleyJoannaWilliams, NancyWheeler, SteveHarrington, YuiKimura, ZarinaKassir, CherylMason, FelixRichter, ÉlodieRakoto, YunjinLee, JillValentine, LeonScottKennedy, MikaelaReid, JonahVasquez, YoichiAsakawa, HadieKaur, AdaWong, RebeccaChambers, VittorioToscano, ThalitaLyra, RenatoLyra, GabrielSoma, NicolasCage, EllenRipley]

# 下記辞書型データ↓
dictionary_1 = {
    "ドワイト・フェアフィールド": ["絆", "有能の証明", "リーダー"]
    ,"メグ・トーマス": ["素早く静かに", "全力疾走", "アドレナリン"]
    ,"クローデット・モレル": ["共感", "植物学の知識", "セルフケア"]
    ,"ジェイク・パーク": ["鋼の意思", "魂の平穏", "サボタージュ"]
    ,"ネア・カールソン": ["スマートな着地", "都会の逃走術", "都会の生存術"]
    ,"エース・ヴィスコンティ": ["手札公開", "賭け金のレイズ", "最後の切り札"]
    ,"フェン・ミン": ["テクニシャン", "しなやか", "警戒"]
    ,"デイビッド・キング": ["ずっと一緒だ", "デッド・ハード", "弱音はナシだ"]
    ,"ウィリアム・ビル・オーバーベック": ["置き去りにされた者", "与えられた猶予", "不滅"]
    ,"ローリー・ストロード": ["唯一の生存者", "執念の対象", "決死の一撃"]
    ,"クエンティン・スミス": ["目を覚ませ！", "調剤学", "寝ずの番"]
    ,"タップ刑事": ["執念", "刑事の直感", "張り込み"]
    ,"ケイト・デンソン": ["ダンス・ウィズ・ミー", "ウィンドウズ・オブ・オポチュニティ", "ボイルオーバー"]
    ,"アダム・フランシス": ["陽動", "解放", "独学者"]
    ,"ジェフ・ヨハンセン": ["ブレイクダウン", "アフターケア", "ディストーション"]
    ,"ジェーン・ロメロ": ["連帯感", "平常心", "真っ向勝負"]
    ,"アシュレイ・J・ウィリアムズ": ["フリップ・フロップ", "ベルトを締めろ！", "英雄の奮起"]
    ,"木村結衣": ["怪我の功名", "強硬手段", "突破"]
    ,"ザリーナ・カッシル": ["オフレコ", "おとり", "人々のために"]
    ,"シェリル・メイソン": ["ソウルガード", "血の協定", "抑圧の同盟"]
    ,"フェリックス・リクター": ["透視家", "苦肉の策", "耐久設計"]
    ,"エロディー・ラコト": ["査定", "欺き", "勢力争い"]
    ,"リー・ユンジン": ["出世街道", "大ヒット", "自己防衛"]
    ,"レオン・S・ケネディ": ["忍苦の時", "スタングレネード", "新人魂"]
    ,"ジル・バレンタイン": ["カウンターフォース", "起死回生", "地雷爆破"]
    ,"ミカエラ・リード": ["千里眼", "恵み：癒しの輪", "恵み：シャドウステップ"]
    ,"ジョナ・バスケス": ["是正措置", "恵み：指数関数", "打開策"]
    ,"浅川陽一": ["父の助言", "共感的つながり", "恵み：霊界理論"]
    ,"ハディ・カウル": ["インナーフォーカス", "残像の顕現", "過剰な熱意"]
    ,"エイダ・ウォン": ["盗聴", "反射回復", "雲隠れ"]
    ,"レベッカ・チェンバース": ["みなぎる活力", "安心感", "全集中"]
    ,"ビットリオ・トスカーノ": ["位置エネルギー", "霧の作法", "加速の策略"]
    ,"タリータ・リーラ": ["逃亡の飛躍", "切磋琢磨", "チームワーク：二人の力"]
    ,"レナート・リーラ": ["影の実力者", "血の騒ぎ", "チームワーク：共同ステルス"]
    ,"ガブリエル・ソーマ": ["修理担当者", "状況適応能力", "ゴミ漁りの名人"]
    ,"ニコラス・ケイジ": ["劇作法", "シーンの相手役", "予想外の展開"]
    ,"エレン・リプリー": ["科学的な罠", "忍び足", "幸運の星"]
    ,"共有パーク": ["きっとやり遂げる", "コソ泥の本能", "セカンドウインド(リニューアル)", "ツルツルとした肉体", "デジャブ", "ベビーシッター(監視者)", "一緒にいよう(状況認識)", "予感", "仲間意識(親近感)", "内なる力(内なる回復)", "凍りつく背筋", "執着心", "自己認識", "小さな獲物", "希望", "痛みも気から", "血族", "誰も見捨てはしない", "身軽", "逆境魂", "闇の感覚"]}


# 下記試験用出力欄↓
# print(survivors)

# print(suv_park_1)

# print(suv_park_2)

# print(len(survivor))

# print(len(suv_park_2))

# print(len(dictionary_1))

# dictionary_1の"値"を全て出力
# print(dictionary_1.values())

# dictonary_1の"値"を一つ毎に改行しながら全て出力
# for k in dictionary_1.values():
#     print(k)

# dictionary_1の全てのkeyをリスト化して出力
# print(list(dictionary_1))

# dictionary_1の値を2次元リストにして出力
# print(list(dictionary_1.values()))

# dictionary_1を2次元リストにし、さらに1次元リストにして出力
# d_d1 = list(dictionary_1.values())
# print(list(itertools.chain.from_iterable(d_d1)))

# 指定したdictionary_1のkey(キャラクター)の値を除いた辞書データの出力
# def revision(dictionary_1, names):
#     for name in names:
#         del dictionary_1[name]
#     return dictionary_1
# Fixed_dic = revision(dictionary_1, ["ドワイト・フェアフィールド", "メグ・トーマス", "共有パーク"])
# print(Fixed_dic)




# 【下記実践用出力例欄】

# 1.リストからランダムでパークを4つ取り出す（重複なし、suv_park_1より）
# print(random.sample(suv_park_1, 4))


# 2.リストからランダムでパークを1〜4つ取り出す（重複なし、suv_park_1より）
# random_1_to_4 = random.randint(1, 4)
# print(random_1_to_4)
# print(random.sample(suv_park_1, random_1_to_4))


# 3.指定した数だけランダムなパークを取り出す（重複なし、suv_park_1より）
# park_num = 3
# print(park_num)
# print(random.sample(suv_park_1, park_num))


# ----------------------------------------ここからdictionary_1由来メソッド----------------------------------------------


# 4.ランダムでパークを4つ取り出す（重複なし ＆ dictionary_1から取り出す）
d_1d = list(itertools.chain.from_iterable(dictionary_1.values())) # 辞書データを2次元リストにし、1次元化
print(random.sample(d_1d, 4))


# 5.ランダムでパークを1〜4つ取り出す（重複なし　＆　dictionary_1から取り出す）
# d_1d = list(itertools.chain.from_iterable(dictionary_1.values())) # 辞書データを2次元リストにし、1次元化
# random_1_to_4 = random.randint(1, 4) #ランダムで1から4の数を取得
# print(random_1_to_4)
# print(random.sample(d_1d, random_1_to_4))


# 6.指定した数だけランダムなパークを取り出す（重複なし　＆　dictionary_1から取り出す）
# park_num = 2 #ここで数を指定
# d_1d = list(itertools.chain.from_iterable(dictionary_1.values())) # 辞書データを2次元リストにし、1次元化
# print(park_num)
# print(random.sample(d_1d, park_num))


# 7.指定したdictionary_1のkey(キャラクター)の値（パーク）を除いた状態からランダムでパークを4つ取り出す（重複なし　＆　dictionary_1から取り出す）
# def revision(dictionary_1, names): # 辞書データから指定したkeyの値を削除したデータを返すメソッド
#     for name in names:
#         del dictionary_1[name]
#     return dictionary_1 #戻り値は辞書型のまま
# Fixed_dic = revision(dictionary_1, ["ドワイト・フェアフィールド", "メグ・トーマス", "共有パーク"]) #revision関数にdictionary_1データと除くキャラクター名(リストデータ)を引数に挿入
# d_1d = list(itertools.chain.from_iterable(Fixed_dic.values())) # 辞書データ「Fixed_dic」　→ 2次元リスト「list(dictionary_1.values())」　→ 1次元リストlist(itertools.chain.from_iterable(Fixed_dic.values()))
# print(random.sample(d_1d, 4))


# 8.指定したdictionary_1の値（パーク）を除いた状態からランダムでパークを4つ取り出す（重複なし　＆　dictionary_1から取り出す）
# def revision(dictionary_1, parks): # 引数の辞書データの値を1次元リストにし、2つ目の引数である除きたいパークのリストデータを1次元リストから除いたリストデータを返すメソッド
#     d_d1 = list(itertools.chain.from_iterable(dictionary_1.values()))
#     for park in parks:
#         d_d1.remove(park)
#     return d_d1 #戻り値はリスト型
# Fixed_list = revision(dictionary_1, ["絆", "素早く静かに", "共感", "植物学の知識", "セルフケア"]) # revision関数にdictonary_1データと除く値（パーク名）を引数に挿入
# print(random.sample(Fixed_list, 4))


# 9.4でやったことを一括関数化
# def R4parksMethod():
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     r_4parks = random.sample(d_1d, 4)
#     return r_4parks
# r_4parks = R4parksMethod()
# print(r_4parks)


# 10.5でやったことを一括関数化
# def R1To4parksMethod():
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     random_1to4num = random.randint(1, 4)
#     r_1to4parks = random.sample(d_1d, random_1to4num)
#     return r_1to4parks
# r_1to4parks = R1To4parksMethod()
# print(r_1to4parks)


# 11.6でやったことを一括関数化（指定の数は入力すること）
# def RparkSpecifyNumMethod(park_num):
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     r_park_specify_num = random.sample(d_1d, park_num)
#     return r_park_specify_num
# print("パークの数を指定してください。")
# park_num = int(input())
# r_park_specify_num = RparkSpecifyNumMethod(park_num)
# print(r_park_specify_num)


# 12.7でやったことを一括関数化
# def RparkSpecifyCharMethod(names): # 辞書データから指定したkeyの値を削除したデータを返すメソッド
#     for name in names:
#         del dictionary_1[name]
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     rd_1d = random.sample(d_1d, 4)
#     return rd_1d
# r_park_specify_char = RparkSpecifyCharMethod(["ドワイト・フェアフィールド"])
# print(r_park_specify_char)


# 13.8でやったことを一括関数化
# def RparkSpecifyParMethod(parks): # 引数の辞書データの値を1次元リストにし、2つ目の引数である除きたいパークのリストデータを1次元リストから除いたリストデータを返すメソッド
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     for park in parks: # removeで消されるデータはあくまでメソッド内部のリストデータのみ
#         d_1d.remove(park)
#     rd_1d = random.sample(d_1d, 4)
#     return rd_1d #戻り値はリスト型
# r_park_specify_par = RparkSpecifyParMethod(["全力疾走", "アドレナリン", "共感", "植物学の知識", "セルフケア", "鋼の意思", "魂の平穏", "サボタージュ", "スマートな着地", "都会の逃走術", "都会の生存術", "手札公開", "賭け金のレイズ", "最後の切り札", "テクニシャン", "しなやか", "警戒", "ずっと一緒だ", "デッド・ハード", "弱音はナシだ", "置き去りにされた者", "与えられた猶予", "不滅", "唯一の生存者", "執念の対象", "決死の一撃", "目を覚ませ！", "調剤学", "寝ずの番", "執念", "刑事の直感", "張り込み", "ダンス・ウィズ・ミー", "ウィンドウズ・オブ・オポチュニティ", "ボイルオーバー", "陽動", "解放", "独学者", "ブレイクダウン", "アフターケア", "ディストーション", "連帯感", "平常心", "真っ向勝負", "フリップ・フロップ", "ベルトを締めろ！", "英雄の奮起", "怪我の功名", "強硬手段", "突破", "オフレコ", "おとり", "人々のために", "ソウルガード", "血の協定", "抑圧の同盟", "透視家", "苦肉の策", "耐久設計", "査定", "欺き", "勢力争い", "出世街道", "大ヒット", "自己防衛", "忍苦の時", "スタングレネード", "新人魂", "カウンターフォース", "起死回生", "地雷爆破", "千里眼", "恵み：癒しの輪", "恵み：シャドウステップ", "是正措置", "恵み：指数関数", "打開策", "父の助言", "共感的つながり", "恵み：霊界理論", "インナーフォーカス", "残像の顕現", "過剰な熱意", "盗聴", "反射回復", "雲隠れ", "みなぎる活力", "安心感", "全集中", "位置エネルギー", "霧の作法", "加速の策略", "逃亡の飛躍", "切磋琢磨", "チームワーク：二人の力", "影の実力者", "血の騒ぎ", "チームワーク：共同ステルス", "修理担当者", "状況適応能力", "ゴミ漁りの名人", "劇作法", "シーンの相手役", "予想外の展開", "科学的な罠", "忍び足", "幸運の星", "きっとやり遂げる", "コソ泥の本能", "セカンドウインド(リニューアル)", "ツルツルとした肉体", "デジャブ", "ベビーシッター(監視者)", "一緒にいよう(状況認識)", "予感", "仲間意識(親近感)", "内なる力(内なる回復)", "凍りつく背筋", "執着心", "自己認識", "小さな獲物", "希望", "痛みも気から", "血族", "誰も見捨てはしない", "身軽", "逆境魂", "闇の感覚"]) # revision関数にdictonary_1データと除く値（パーク名）を引数に挿入
# print(r_park_specify_par)


# 14.12でやったことにさらにメソッドの引数は入力でできるようにすること
# def RparkSpecifyCharMethod(names): # 辞書データから指定したkeyの値を削除したデータを返すメソッド
#     for name in names:
#         del dictionary_1[name]
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     rd_1d = random.sample(d_1d, 4)
#     return rd_1d
# print("除外するキャラクターを入力してください。(複数選択する場合は半角区切りで入力すること)")
# excluded_characters = input().split()
# r_park_specify_char = RparkSpecifyCharMethod(excluded_characters)
# print(r_park_specify_char)


# 15.13でやったことにさらにメソッドの引数は入力でできるようにすること
# def RparkSpecifyParMethod(parks): # 引数の辞書データの値を1次元リストにし、2つ目の引数である除きたいパークのリストデータを1次元リストから除いたリストデータを返すメソッド
#     d_1d = list(itertools.chain.from_iterable(dictionary_1.values()))
#     for park in parks: # removeで消されるデータはあくまでメソッド内部のリストデータのみ
#         d_1d.remove(park)
#     rd_1d = random.sample(d_1d, 4)
#     return rd_1d #戻り値はリスト型
# print("除外するパークを入力してください。(複数選択する場合は半角区切りで入力すること)")
# excluded_parks = input().split()
# r_park_specify_par = RparkSpecifyParMethod(excluded_parks) # revision関数にdictonary_1データと除く値（パーク名）を引数に挿入
# print(r_park_specify_par)
